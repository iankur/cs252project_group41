[{"course_id": "CS-201", "course_name": " Mathematics for Computer Science - I", "course_details": "\n(1)Mathematical proofs, proofs by induction, by contradiction, proving the contrapositive.\n(2)Basic counting techniques, pigeon-hole principle, recurrence  relations, generating functions, principle of inclusion and exclusion,  Mobius inversion.\n(3)Graphs, trees - definitions. Connectivity, paths, cycles, Eulerian  walks, Hamiltonian cycles, cliques, colourings, graph matching,  planarity.\n(4)Discrete probability. Sample space, events, probability - basic  laws, discrete random variable, expectation, linearity of expectation,  independence, conditioning, Bayes theorem, Bernoulli, binomial and  geometric distributions, moments and deviations, Markov, Tchebyshev\u00e2\u20ac\u2122s  inequalities, Chernoff bounds.\n(5)Application of probabilistic methods in combinatorics and graph theory.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: None"}, {"course_id": "CS-202", "course_name": " Mathematics for Computer Science - II", "course_details": "\n(1)Propositional logic syntax and semantics.\n(2)Tautologies, axiom system and deduction.\n(3)Proof of soundness and completeness.\n(4)First order logic syntax and semantics.\n(5)Structures, models, satisfaction and validity.\n(6)Axiomatization, soundness and completeness.\n(7)Optional: some advanced topics.", "course_credit": "Units: 3-0-0-9 (modular second half)", "course_preReq": "Pre-requisites: None"}, {"course_id": "CS-203", "course_name": " Mathematics for Computer Science - III", "course_details": "\n(1)Group theory: definition of groups, cosets and Lagrange\u00e2\u20ac\u2122s theorem,  subgroups, normal subgroups, quotient groups, group action and  Burnside\u00e2\u20ac\u2122s lemma.\n(2)Rings, Fields, integral domains - basic definitions and properties.  Field extensions, Chinese remaindering over integers and polynomial  rings. (optional: Introduction to finite fields.)", "course_credit": "Units: 3-0-0-9 (modular first half)", "course_preReq": "Pre-requisites: None"}, {"course_id": "CS-210", "course_name": " Data Structures and Algorithms", "course_details": "\n(1)Random-access-machine model, concept of problem size, and asymptotic behaviour of time/space complexity.\n(2)Estimation of time/space complexity by smooth functions and order notations.\n(3)A simple example of worst-case time/space complexity analysis.\n(4)Elementary data-structures: arrays, lists, queues, stacks and their applications.\n(5)Binary search algorithm, binary trees, binary-search-tree data-structure.\n(6)Balanced binary-search-tree: Red-Black trees.\n(7)Hashing for insert, search, delete.\n(8)Heap data structure.\n(9)Efficient data structures, apart from those in items 6,7, and 8, for sets with the following group of operations:", "course_credit": "Units: 3-0-3-12", "course_preReq": "Pre-requisites: ESC101"}, {"course_id": "CS-220", "course_name": " Computer Organisation", "course_details": "\n(1)Introduction.\n(2)Arithmetic algorithms.", "course_credit": "Units: 3-0-3-12", "course_preReq": "Pre-requisites: ESC101, ESC201"}, {"course_id": "CS-251", "course_name": " Computing Laboratory - I", "course_details": "\n(1)Basic operating system commands. Students are expected to know the  basic shell (e.g., bash) commands and should be able to understand the  options and functioning of a command by reading the man and info pages.\n(2)Editors. Again, students are expected to be familiar with at least  one of the two editors vim and emacs. However, they should be able to  utilize the multiple features of the editors (such as automatic  indentation, context-sensitive colouring, letype-sensitive auto-wrap,  etc.) and not use them simply as a typewriter.\n(3)Version control. Students will need to completely know how at least  one of the version control systems (e.g., cvs, svn, git, darcs) work.  They should be able to check in, check out, resolve errors and put tags  on a snapshot. On all subsequent assignments, they must use a form of  version control.\n(4)Scripting and automation. Of the various types of shells (bash, csh,  tcsh, ksh), the preferred choice is bash, although students should be  familiar with the different command syntax in other shells as well.  Also, they will need to know the various functions (e.g., seq, for) that  a shell provides. The choice of the scripting language (perl or python)  is open to students.\n(5)Document preparation. Students will learn using latex for preparing  documents. They should also know how to format properly the equations,  gures, tables, theorems, etc. using different packages and options. For  bibliography management, they should use bibtex, and must use it within  the latex documents. For drawing figures and graphs, they can choose to  learn some or all of the different softwares used popularly (they  include gnuplot, xfig, etc.).\n(6)Hardware. Students will work hands-on to learn how to install hard  drives, RAM, etc., and in general, assemble a computer from its  different parts.\n(7)Web applications. Students will need to know the different web  languages (html, xml) that are used along with the scripting languages  (php, javascript), forms and database tools (MySQL) that are necessary  for setting up a website. Students should be able to setup a wiki site  as well.\n(8)Useful Application Software. Students should learn to effectively  use various softwares that serve a whole range of applications. These  include the general purpose octave or scilab, the more statistically  oriented R and the image manipulator gimp.\n(9)Operating system installation and packages Students can choose a  particular distribution of Linux (e.g., Fedora, Debian, Ubuntu, etc.)  and learn installing the basic operating system and different packages.  They should also learn how to congure options globally (including  booting) and for particular users only. They will further understand how  to debug problems using the log and error les.", "course_credit": "Units: 0-0-3-3", "course_preReq": "Pre-requisites: ESC101"}, {"course_id": "CS-252", "course_name": " Computing Laboratory - II", "course_details": "\n(1)System administration: Students will learn to setup and manage a  network server including a web server and an email server. They should  also be familiar with various network protocols. Further, students will  be able to administer different components of the system by using  various monitoring tools. They should also learn simple load-balancing  tools.\n(2)Security: While setting up different network and  database servers, students will learn to manage the security issues  including different attacks. Public key infrastructure (PKI) is a good  example of how to setup, manage, and distribute certicates that are  issued as authorization tools. As part of maintaining sys- tems,  students will need to use system vulnerability and intrusion testing  tools as well.\n(3)Compiler tools: Students will need to learn the various low-level tools used routinely in compilers including lex and yacc.\n(4)Programming environment tools: For efcient  programming, students are expected to use various integrated development  environments (IDEs) such as eclipse and debuggers such as gdb. They  should also use tools for effective tagging and browsing of source code.  Finally, they will learn to use the build tools that are necessary for  large software projects.", "course_credit": "Units: 0-0-3-3", "course_preReq": "Pre-requisites: ESC101, CS251"}, {"course_id": "CS-300", "course_name": " Technical Communication", "course_details": "\n(1)Technical writing\n(2)Editing your own work\n(3)Critiquing others' work, mentoring\n(4)Preparing and making presentations", "course_credit": "Units: 0-0-2-2", "course_preReq": "Pre-requisite: None"}, {"course_id": "CS-315", "course_name": " Principles of Database Systems", "course_details": "\n(1)Introduction: Database applications, purpose, accessing and  modifying databases, need for transactions, architecture - users and  administrators, data mining, information retrieval. iRelational  Databases: relational model, database schema, keys, relational query  languages, algebra, tuple and domain calculus example queries,  (optional: equivalence of relational calculus and relational algebra).\n(2)SQL: Data definition, basic SQL query structure, set operations,  nested subqueries, aggregation, null values, database modification, join  expressions, views.\n(3)Database Design: E-R model, E-R diagram, reduction to relational  schema, E-R design issues, database integrity, specifying integrity  constraints in SQL: unique columns, foreign key, triggers.\n(4)Relational Database Design: features of good design, Functional  Dependency theory, decomposition using functional dependency and normal  forms, algorithms for decomposition, normal forms, (optional:  multi-valued dependency and 4th normal form).\n(5)Storage and File structure: Overview of secondary storage, RAID  and flash storage. Storing tables: row-wise, column database, database  buffer. Indexing: concepts, clustered and non-clustered indices, B+-tree  indices, multiple key access, hashed files, linear hash files, bitmap  indices, Index definition in SQL, ++R-trees.\n(6)Query Processing: Overview, measures of query cost, selection,  sorting, join processing algorithms-nested loops, merge-sort, hash join,  aggregation.\n(7)Query Optimization: purpose, transformation of relational  expressions, estimating cost and statistics of expression, choosing  evaluation plans, linear and bushy plans, dynamic programming  algorithms.\n(8)Transactions: Concept and purpose, ACID properties and their  necessity, transactions in SQL. Problems with full isolation and levels  of isolation.\n(9)Concurrency Control: lock-based protocols, 2-phase locking,  deadlock handling, multiple granularity, timestamp based protocols,  index locking, (optional: validation protocols, multi-version protocols,  snap shot isolation, predicate locking, concurrency control for index  structures).\n(10)Recovery: Failures and their classification, recovery and  atomicity, recovery algorithms, Undo-Redo with write ahead logging, no  Undo no Redo and other combinations, buffer management, (optional: ARIES  recovery).", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210, CS330"}, {"course_id": "CS-330", "course_name": " Operating Systems", "course_details": "\n(1)Introduction: review of computer organization, intoduction to  popular operating systems like UNIX, Windows, etc., OS structure, system  calls, functions of OS, evolution of OSs.\n(2)Computer organization interface: using interrupt handler to pass control between a running program and OS.\n(3)Concept of a process: states, operations with examples from UNIX  (fork, exec) and/or Windows. Process scheduling, interprocess  communication (shared memory and message passing), UNIX signals.\n(4)Threads: multithreaded model, scheduler activations, examples of threaded programs.\n(5)Scheduling: multi-programming and time sharing, scheduling  algorithms, multiprocessor scheduling, thread scheduling (examples using  POSIX threads).\n(6)Process synchronization: critical sections, classical two process  and n-process solutions, hardware primitives for synchronization,  semaphores, monitors, classical problems in synchronization  (producer-consumer, readers-writer, dining philosophers, etc.).\n(7)Deadlocks: modeling, chararcterization, prevention and avoidance, detection and recovery.\n(8)Memory management: with and without swapping, paging and  segmentation, demand paging, virtual memory, page replacement  algorithms, working set model, implementations from operating systems  such as UNIX, Windows. Current Hardware support for paging: e.g.,  Pentium/ MIPS processor etc.\n(9)Secondary storage and Input/Output: device controllers and device  drivers, disks, scheduling algorithms, file systems, directory  structure, device controllers and device drivers, disks, disk space  management, disk scheduling, NFS, RAID, other devices. operations on  them, UNIX FS, UFS protection and security, NFS.\n(10)Protection and security: Illustrations of security model of UNIX and other OSs. Examples of attacks.\n(11)Epilogue: Pointers to advanced topics (distributed OS, multimedia  OS, embedded OS, real-time OS, OS for multiprocessor machines).", "course_credit": "Units: 3-0-3-12", "course_preReq": "Pre-requisites: ESC101, CS210, CS220"}, {"course_id": "CS-335", "course_name": " Compiler Design", "course_details": "\n(1)Compiler structure: analysis-synthesis model of compilation,  various phases of a compiler, tool based approach to compiler  construction.\n(2)Lexical analysis: interface with input, parser and symbol table,  token, lexeme and patterns. Difficulties in lexical analysis. Error  reporting. Implementation. Regular definition, Transition diagrams.\n(3)Syntax analysis: CFGs, ambiguity, associativity, precedence, top  down parsing, recursive descent parsing, transformation on the grammars,  predictive parsing, bottom up parsing, LR parsers (SLR, LALR, LR).\n(4)Syntax directed definitions: inherited and synthesized  attributes, dependency graph, evaluation order, bottom up and top down  evaluation of attributes, L- and S-attributed definitions.\n(5)Type checking: type system, type expressions, structural and name  equivalence of types, type conversion, overloaded functions and  operators, polymorphic functions.\n(6)Run time system: storage organization, activation tree,  activation record, stack allocation of activation records, parameter  passing mechanisms.\n(7)Intermediate code generation: intermediate representations,  translation of declarations, assignments, control flow, boolean  expressions and procedure calls. Implementation issues.\n(8)Code generation and instruction selection: issues, basic blocks  and flow graphs, register allocation, code generation, dag  representation of programs, code generation from dags, peep hole  optimization, code generator generators, specifications of machine.\n(9)Introduction to Dataflow Anaysis (Reaching Definitions and Live Variable Analysis).\n(10)Introduction to compilation for modern architectures (superscaler out-of-order, VLIW, GPU etc.).", "course_credit": "Units: 3-0-3-12", "course_preReq": "Pre-requisites: ESC101, CS210, CS220, CS330"}, {"course_id": "CS-340", "course_name": " Theory of Computation", "course_details": "\n(1)Introduction: Motivation for studying theory of computation, a  quick overview of the subject. Notion of formal language. Language  membership problem, why this is taken as the central problem of the  subject.\n(2)Finite automata and regular expressions: DFA, NFA (with and  without transitions), their equivalence. Proof that for some languages  NFAs can be exponentially more succinct than DFAs. Denition of regular  expressions. Proof that FAs recognize, and regular expressions denote  the same class of languages, viz., regular languages.\n(3)Properties of regular languages: Pumping lemma and its use to  prove non-regularity of a language, closure properties of class of  regular languages, decision properties: convert- ing among  representations, testing emptiness, etc. Minimization of DFAs,  Myhill-Nerode theorem.\n(4)Context-free grammars and languages: Derivation, parse trees.  Language generated by a CFG. Eliminating useless symbols, -productions,  unit productions. Chomsky normal form.\n(5)Pushdown automata: Denition, instantaneous description as a  snapshot of PDA com- putation, notion of acceptance for PDAs: acceptance  by nal states, and by empty stack; the equivalence of the two notions.  Proof that CFGs generate the same class of languages that PDAs accept.\n(6)Properties of context-free languages: Pumping lemma for  context-free languages and its use to prove a language to be not  context-free. Closure properties of the class of context- free  languages. CYK algorithm for CFL membership, testing emptiness of CFLs.\n(7)Turing machines: Historical context, informal proofs of  undecidability. Denition of TM, instantaneous description as a snapshot  of TM computation, notion of acceptance. Robustness of the model: both  natural generalizations and restrictions keep the class of languages  accepted invariant. (Generalizations: multi-track, multi-tape,  nondeterministic, etc. Restrictions: semi-innite tape, counter  machines). Church-Turing hypothesis.\n(8)Undecidability: Denitions of r.e. and recursive languages. Turing  machine codes, the diagonalization language and proof that it is not  r.e. Universal Turing machine. Universal language, its  semi-decidability. Reducibility and its use in proving undecidability.  Rices theorem. Undecidability of Posts correspondence problem.\n(9)Intractability: Motivation for the notion. The class P as  consensus class of tractable sets. Classes NP, co-NP. Polynomial time  reductions. NP-completess, NP-hardness. Cook- Levin theorem. Mention  about boundary of tractability: 2SAT vs. 3SAT, 2D matching vs. 3D  matching. Some NP-completeness proofs: vertex cover, clique, independent  sets, Hamiltonian graphs, subset-sum, set cover.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210"}, {"course_id": "CS-345", "course_name": " Algorithms II", "course_details": "\n(1)Amortized analysis.\n(2)Exposure to some advanced data structures (For example, Fibonacci  heaps or augmented data structures or interval trees or dynamic trees).\n(3)As part of CS210/ESO211 course, three algorithm paradigms, namely,  greedy method, divide and conquer, and dynamic programming are  discussed. These algorithm paradigms should be revisited in CS345, but  with advanced applications and/or emphasis on their theoretical  foundations as follows.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210"}, {"course_id": "CS-350", "course_name": " Principles of Programming Languages", "course_details": "\n(1)Imperative Languages: block structure, scope rules, parameter passing, constructs like coroutines, tasks, exceptions etc.\n(2)Functional programming: functions, recursion, macros, user-defined  control constructs, higher order constructs, types, data abstraction,  lazy evaluation, polymorphism, semantics, type inference, and  implementation issues.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210."}, {"course_id": "CS-360", "course_name": " Introduction to Computer Graphics and Simulation", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-365", "course_name": " Artificial Intelligence", "course_details": "\n(1)AI: Introduction", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210, CS202"}, {"course_id": "CS-397", "course_name": " Special Topics in Computer Science", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-422", "course_name": " Computer Architecture", "course_details": "\n(1)Overview of computer architecture, performance evaluation of processors.\n(2)Pipelining, super-pipelines, advanced pipelines, static and dynamic scheduling, instruction-level parallelism, loop unrolling, VLIW and superscalar processors, vector processing and array processing.\n(3)Memory bandwith issues, memory organization, cache hierarchy.\n(4)Symmetric multiprocessors (SMP), NUMA-MPs, massively parallel processors, cache coherence protocols, interconnection networks, I/O processing, multiprocessing, multiplexing, examples of contemporary architectures, RAS (Reliability, Availability, Scalability) features.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210, CS220, CS330."}, {"course_id": "CS-425", "course_name": " Computer Networks", "course_details": "\n(1)Introduction, history and development of computer networks, networks topologies. Layering and protocols.\n(2)Physical Layer: Different types of transmission media, errors in  transmission: attenuation, noise. Repeaters. Encoding (NRZ, NRZI,  Manchester, 4B/5B, etc.).\n(3)MAC Layer: Aloha, CSMA, CSMA/CD, CSMA/CA protocols. Examples:  Ethernet, including Gigabit Ethernet and WiFi (802.11). Time permitting,  a quick exposure to Token Ring and to Bluetooth, WiMax may also be  included.\n(4)Data Link Layer: Error detection (Parity, CRC), Sliding Window, Stop and Wait protocols.\n(5)LAN: Design, specifications of popular technologies, switching. A  student should be able to design LAN of a campus or a building.\n(6)Network layer: Internet Protocol, IPv6, ARP, DHCP, ICMP, Routing  algorithms: Distance vector, Link state, Metrics, Inter-domain routing.  Subnetting, Classless addressing, Network Address Translation.\n(7)Transport layer: UDP, TCP. Connection establishemnt and termination,  sliding window revisited, flow and congestion control, timers,  retransmission, TCP extensions, etc.\n(8)Design issues in protocols at different layers.\n(9)Network Programming: Socket Programming.\n(10)Session, Presentation, and Application Layers. Examples: DNS, SMTP, IMAP, HTTP, etc.\n(11)Network Security: Conepts of symmetric and asymmetric key  cryptography. Sharing of symmetric keys - Diffie Hellman. Public Key  Infrastructure. Public Key Authentication Protocols. Symmetric Key  Authentication Protocols. Pretty Good Privacy (PGP), IPSec, Firewalls.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210."}, {"course_id": "CS-433", "course_name": " Parallel Programming", "course_details": "\n(1)Introduction: Why parallel computing; Ubiquity of parallel hardware/multi-cores; Processes and threads; Programming models: shared memory and message passing; Speedup and efciency; Amdahls Law.\n(2)Introduction to parallel hardware: Multi-cores and multiprocessors; shared memory and message passing architectures; cache hierarchy and coherence; sequential consistency.\n(3)Introduction to parallel software: Steps involved in developing a parallel program; Depen- dence analysis; Domain decomposition; Task assignment: static and dynamic; Performance issues: 4C cache misses, inherent and artifactual communication, false sharing, computation-to-communication ratio as a guiding metric for decomposition, hot spots and staggered communication.\n(4)Shared memory parallel programming: Synchronization: Locks and barriers; Hardware primitives for efcient lock implementation; Lock al- gorithms; Relaxed consistency models; High-level language memory models (such Java and/or C++); Memory fences. Developing parallel programs with UNIX fork model: IPC with shared memory and message pass- ing; UNIX semaphore and its all-or-none semantic. Example case studies (see note below for some details). Developing parallel programs with POSIX thread library: Thread creation; Thread join; Mutex; Condition variables. Example case studies (see note below for some details). Developing parallel programs with OpenMP directives: Parallel for; Parallel section; Static, dy- namic, guided, and runtime scheduling; Critical sections and atomic operations; Barriers; Reduction. Example case studies (see note below for some details).\n(5)Message passing programming: Distributed memory model; Introduction to message passing interface (MPI); Synchronization as Send/Recv pair; Synchronous and asynchronous Send/Recv; Collective communication: Reduce, Broadcast, Data distribution, Scatter, Gather; MPI derived data types. Example case studies (see note below for some details).\n(6)Introduction to GPU programming: GPU architecture; Introduction to CUDA programming; Concept of SIMD and SIMT computation; Thread blocks; Warps; Global memory; Shared memory; Thread divergence in control transfer; Example case studies (see note below for some details).\n(7)Additional topics: PGAS and APGAS programming paradigms; Transactional memory paradigm; Introduction to speculative parallelization.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: ESC101, CS210, CS220, CS330, CS335."}, {"course_id": "CS-455", "course_name": " Software Engineering", "course_details": "\n(1)Software development lifecycle.\n(2)Process models.\n(3)Requirements specifications.\n(4)Basic software architecture.\n(5)Software design, UML modelling.\n(6)Design patterns in software.\n(7)Software implementation.\n(8)Testing, verification and validation.\n(9)Static analysis.\n(10)Introduction to software model checking.\n(11)Software metrics.\n(12)Software project management.", "course_credit": "Units: 3-0-0-9", "course_preReq": "Pre-requisites: CS210, CS202."}, {"course_id": "CS-497", "course_name": " Special Topics in Computer Science", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-498", "course_name": " B Tech Project", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-499", "course_name": " B Tech Project", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "", "course_name": "Logic", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-602", "course_name": " Fundamentals of Computer Systems", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-603", "course_name": " Fundamentals of Theoretical Computer Science", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-615", "course_name": " Skyline Queries in Databases", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-617", "course_name": " Database Queries", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-618", "course_name": " Indexing and Searching Techniques in Databases", "course_details": "\n(1)Database Queries\n(2)Hashing\n(3)Memory-based Index Structures\n(4)Hierarchical Structures\n(5)Distance Functions\n(6)Distance-based Structures\n(7)Curse of Dimensionality\n(8)High-dimensionality Structures\n(9)Dimensionality Reduction Techniques\n(10)Data Representation Techniques", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-619", "course_name": " Advances in DBMS", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-621", "course_name": " Topics in Contemporary Microarchitecture", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-622", "course_name": " Advanced Computer Architecture", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-623", "course_name": " VLSI Design for Parallel Architectures", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-624", "course_name": " Topics in Embedded Systems", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-625", "course_name": " Advanced Computer Networks", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-626", "course_name": " Fault Tolerant Computing Systems", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-627", "course_name": " E-commerce", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-628", "course_name": " Computer Systems Security", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-629", "course_name": " Parallel Execution of Programs", "course_details": "\n(1)J. L. Hennessy and D. A. Patterson. Computer Architecture: A Quantitative Approach. Morgan-Kaufmann publishers, 4e.\n(2)D. E. Culler and J. P. Singh (with A. Gupta). Parallel Computer  Architecture: A Hardware/Software Approach. Morgan-Kaufmann publishers.\n(3)A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley, 2e.\n(4)R. Allen and K. Kennedy. Optimizing Compilers for Modern Architectures: A Dependence-based Approach. Morgan-Kaufmann publishers.\n(5)J. Larus and R. Rajwar. Transactional Memory. Morgan and Claypool publishers.\n(6)S. S. Muchnick. Advanced Compiler Design & Implementation. Morgan-Kaufmann publishers.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-630", "course_name": " Advanced Operating Systems for Embedded Systems, Pervasive Computing and Internet of Things", "course_details": "", "course_credit": "Units: 2-0-3-0-9", "course_preReq": "Pre-requisites: CS330 (Operating Systems), or equivalent undergraduate operation systems course. Strong hands-on knowledge of OS and a desire to get involved in large programming projects with significant research components are essential."}, {}, {"course_id": "CS-632", "course_name": " Topics in Distributed Systems", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-633", "course_name": " Parallel Computing", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-634", "course_name": " Mobile Computing", "course_details": "", "course_credit": "", "course_preReq": ""}, {}, {"course_id": "CS-637", "course_name": " Embedded and Cyber-Physical Systems", "course_details": "\n(1)Modeling Dynamic Behaviors and Control:\u00a0Continuous Dynamics, Feedback Control, Discrete Systems, Hybrid Systems, Composition of State Machines, Concurrent Models of Computation\n(2)Design and Implementation:\u00a0Sensors and Actuators, Embedded Processors, Memory Architectures, Input and Output Interface, Multitasking, Scheduling\n(3)Analysis and Verification:\u00a0Invariants and Temporal Logic, Equivalence and Refinement, Rechability Analysis, Model Checking, Timing Analysis\n(4)Edward A. Lee and Sanjit A. Seshia, Introduction to Embedded Systems, A Cyber-Physical Systems Approach, Second Edition, http://LeeSeshia.org, ISBN 978-1-312-42740-2, 2015.", "course_credit": "", "course_preReq": ""}, {}, {"course_id": "CS-639", "course_name": " Program Analysis, Verification and Testing", "course_details": "\n(1)Dataflow Analysis;\n(2)Interprocedural Analysis: functional, call-string and graph reachability based approaches\n(3)Abstract Interpretation;\n(4)Weakest Precondition, Floyd-Hoare Logic, Separation Logic;\n(5)SoftwareModel Checking: symbolic execution, state-space reduction,  state-less model checking, counter-example guided abstraction  refinement, model checking of concurrent programs\n(6)Program Testing: program testing basics, automatic test-case generation, directed testing.\n(7)Edsger Wybe Dijkstra. A Discipline of Programming. Prentice Hall PTR, Upper Saddle River, NJ, USA, 1997.\n(8)David Gries. The Science of Programming. Springer-Verlag New York, Inc., Secaucus, NJ, USA, 1987.\n(9)S. S. Muchnick and N. D. Jones, editors. Program Flow Analysis:  Theory and Applications. Prentice-Hall: Englewood Cliffs, NJ, 1981.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-640", "course_name": " Computational Complexity", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-641", "course_name": " Modern Cryptology", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-642", "course_name": " Circuit Complexity Theory", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-643", "course_name": " Abstract State Machines: Theory and Practice", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-644", "course_name": " Finite Automata on Infinite Inputs", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-645", "course_name": " Topics in Design and Analysis of Algorithms", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-646", "course_name": " Parallel Algorithms", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-647", "course_name": " Advanced Topics in Algorithms and Data Structures", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-648", "course_name": " Randomised Algorithms", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-649", "course_name": " Logic in Computer Science", "course_details": "\n(1)Communication and Concurrency: Processes as transition systems,  operations on these processes (composition, hiding etc.). Bisimulation  and observational equivalences. Calculus of mobile systems: pi-calculus.  Some theory related to pi calculus. Logics to reason about transition  systems, LTL, CTL* and modal mu calculus.\n(2)Reasoning about Knowledge: Knowledge as modality, axioms of  knowledge. Common knowledge, distributed agents exchanging messages,  agreeing to disagree. Logical omniscience.\n(3)Finite Model Theory: Expressiveness of FO and its extensions on  finite structures. Games for lower bounds. Connections with complexity  classes, role of order on the domain.\n(4)Feasible Proofs: Propositional proof systems for tautologies.  Simulation and lower bounds on length of proofs for specific systems  (e.g. PHP requires superpolynomial length using resolution). Theories of  weak arithmetic, provably total functions and relations to complexity  theory.\n(5)Full Abstraction problem for PCF: PCF as an extension of lambda  calculus. Operational and denotational semantics and the full  abstraction problem. Solutions to the full abstraction problem. Games  semantics.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-650", "course_name": " Topics in Lambda Calculus", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-651", "course_name": " Concurrent Data Structures and Algorithms", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-653", "course_name": " Functional Programming", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-654", "course_name": " Software Architecture", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-655", "course_name": " Object Oriented Software Modeling", "course_details": "", "course_credit": "", "course_preReq": ""}, {}, {"course_id": "CS-660", "course_name": " Fundamentals of Interactive Computer Graphics", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-663", "course_name": " Computational Geometry", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-664", "course_name": " Algorithms in Combinatorial Geometry", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-665", "course_name": " Artificial Intelligence", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-671", "course_name": " Introduction to Natural Language Processing", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-672", "course_name": " Natural Language Processing Semantics", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-673", "course_name": " Machine Translation", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-674", "course_name": " Knowledge Discovery", "course_details": "\n(1)Heikki Mannila, Padhraic Smyth, David Hand.Principles of Data Mining, MIT Press, 2001.\n(2)T Hastie, R Tibshirani, J H Friedman.The Elements of Statistical Learning: Data Mining, Inference, and Prediction, Springer Verlag, 2001.\n(3)Jensen, F.An Introduction to Bayesian Networks. UCL Press, London, 1996.\n(4)Pearl, J.Probabilistic Reasoning in Intelligent Systems: Networks of Plausible Inference. Morgan Kaufmann Publishers, San Mateo, CA, 1988.\n(5)Glymour, C., Cooper, G. (eds.)Computation, Causation & Discovery. AAAI Press/The MIT Press, Menlo Park 1999.\n(6)Pearl, J.Causality: Models, Reasoning and Inference. Cambridge Unversity Press, 2000.\n(7)Ian H Witten, Frank Eibe.Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations, Morgan Kaufmann, 1999.\n(8)Jiawei Han, Micheline Kamber.Data Mining: Concepts and Techniques. Morgan-Kaufmann, 2000.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-676", "course_name": " Computer Vision and Image Processing", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-677", "course_name": " Data and Information Fusion", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-678", "course_name": " Learning With Kernels", "course_details": "\n(1)Mathematical preliminaries: a) Probability - probability  measures, densities, distributions, mean, variance, co-variance,  sampling, stochastic process b) Linear algebra \u00c2\u2013 vector spaces, linear  combinations, convex combinations, norms, inner products, basis,  inequalities c) Functional analysis \u00c2\u2013 function spaces, norm, Banach and  Hilbert spaces, basis, completeness, inequalities, reproducible kernel  Hilbert spaces.\n(2)Data representation, similarity, classification methods, function estimation, measures of classification performance.\n(3)Kernels, representing similarity and dissimilarity.\n(4)Risk and loss functions, estimators.\n(5)Regularization, representer theorem.\n(6)VC dimension and VC bounds.\n(7)SVM and support vectors, multi-class classification, semi definite programming.\n(8)Applications to biology and text categorization.\n(9)Principal component analysis.\n(10)Leave-1-out, leave-m-out bounds.\n(11)Kernel design, hyper-kernels, optimality of kernels.\n(12)Novelty detection.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-680", "course_name": " Category Theory and Applications in Computing", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-681", "course_name": " Computational Algebra and Number Theory", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-682", "course_name": " Quantum Computing", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-684", "course_name": " Introduction to Algorithms and Logics in Game Theory", "course_details": "\n(1)Algorithmic Game Theory, edited by N. Nisan, T. Roughgarden, E. Tardos and V. Vazirani. Cambridge Univ. Press, 2007.\n(2)Some papers/lecture notes may also be referred to.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-685", "course_name": " Data Mining", "course_details": "\n(1)Knowledge mining from databases\n(2)Data pre-processing\n(3)Multi-dimensional data modeling\n(4)Classification and prediction\n(5)Clustering\n(6)Frequent itemset mining\n(7)Anomaly detection\n(8)Mining special kinds of data including text and graph", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-687", "course_name": " Algorithmic Information Theory", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-688", "course_name": " Computational Arithmetic-Geometry and Applications", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-697", "course_name": " Special Topics in Computer Science & Engineering", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS698F", "course_name": " Advanced Data Management", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-638", "course_name": " Formal Methods for Robotics and Automation", "course_details": "\n(1)Basics of Verification:\u00a0Finite State Machines, Linear Temporal Logic (LTL), Computation Tree Logic (CTL), Automata-Based LTL Model Checking, \u03bc-Calculus Model Checking, Markov Decision Process, Probabilistic Computation Tree Logic (PCTL), Probabilistic Model Checking, Bisimulation Equivalence, Reactive Synthesis, Binary Decision Diagram, SAT and SMT Solvers\n(2)Control Theory:\u00a0Basics of Feedback Control Theory, Hybrid Systems, Discrete Abstraction of Hybrid Systems\n(3)Motion Planning:\u00a0Basics of Motion Planning, Sampling-Based Motion Planning, Feedback Motion Planning, Multi-Robot Motion Planning\n(4)Formal Methods for Robotics:\u00a0Motion Planning from LTL and \u03bc-Calculus Specification, Motion Planning from Temporal Logic Specifications with Probabilistic Satisfaction Guarantees, Reactive Motion Plan Synthesis, Explaining Unsynthesizability for High-Level Robot Behaviors, Multi-Robot Motion Planning using SMT Solvers, Software Synthesis for Semi-Autonomous Systems\n(5)C. Baier and J.-P. Katoen. Principles of Model Checking. The MIT Press, 2008.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS698N", "course_name": " Recent Advances in Computer Vision", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-698O", "course_name": " Visual Recognition", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-698P", "course_name": " Applications of Markov Chains in Combinatorial Optimization and in Evolutionary Dynamics", "course_details": "\n(1)Finite Markov Chains and Algorithmic Applications, Olle Haggstrom, Cambridge Univ. Press, 2002.\n(2)Algorithms for random Generation and Counting: A Markov Chain Approach, Alistair Sinclair, Birkhauser, 1993.\n(3)Markov chains and mixing times, David A. Levin, Yuval Peres, and Elizabeth Wilmer, American Mathematical Society, 2006.\n(4)Evolutionary Dynamics, M.A. Nowak, Harvard University Press, 2006.\n(5)Relevant papers.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-698S", "course_name": " Bayesian Machine Learning", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-698U", "course_name": " Topics in Computer Vision", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-698V", "course_name": " Analysis of Concurrent Programs", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-699", "course_name": " MTech Thesis", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-718", "course_name": " Sublinear Algorithms for Processing Massive Data Sets", "course_details": "\n(1)Compressive sensing. fundamental l1/l2 sparse recovery procedure and  universality. Fast sparse recovery: Berinde and Indyk's algorithm.  l2/l2 sparse recovery procedures: Algorithms by Gilbert, Li, Porat and  Strauss and by Price and Woodruff. Communication Complexity:  Introduction and appli-cations: Lower bounds for sparse recovery by Do  Ba et.al. and Price and Woodruff. Connection to Kashin's work.\n(2)l2-Dimensionality Reduction: Johnson-Lindenstrauss's (J-L) Lemma.  Fast J-L transforms: Ailon-Chazelle, Dasgupta et.al., Kane and Nelson.\n(3)Randomized algorithms for matrix problems: Random projections;  Matrix multiplication and norm estimation; Random sampling of columns  and elements from a matrix; Sampling algorithms for L2 regression and  relative error low-rank matrix approximation, Numerical Linear Algebra  in streaming model.\n(4)Novel data-motivated matrix factorizations: Sparse PCA; Matrix rank minimization; CUR and related decompositions.\n(5)(Time permitting) Algorithmic approaches to graph partitioning  problems: Flow-based partitioning methods. Spectral-based partitioning  methods: Combining spectral and flow-based methods; Local graph  partitioning methods. Embeddings and geometric structure related to  graphs. Expanders for algorithms and real networks.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-719", "course_name": " Introduction to Data Streams", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-720", "course_name": " VLSI Testing and Fault-Tolerance", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-725", "course_name": " Topics in Networking", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-726", "course_name": " Topics in Multimedia", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-727", "course_name": " Topics in Internet Technologies", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-728", "course_name": " Topics in Grid Computing", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-730", "course_name": " Topics in Operating Systems", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-738", "course_name": " Advanced Compiler Optimizations", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-740", "course_name": " Topics in Logic and Computation", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-741", "course_name": " Structural Complexity", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-742", "course_name": " Parallel Complexity and Sub-Logarithmic Time Algorithms", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-743", "course_name": " Advanced Graph Algorithms", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS744", "course_name": " Pseudo-Random Generators", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-745", "course_name": " Small Space Bounded Computations", "course_details": "\n(1)Studying the various models of space bounded computations.\n(2)The complexity classes that arise from these modelsand the known relations between them.\n(3)Natural computational problems that characterize these classes.\n(4)Proof techniques in this area such as the double inductive counting technique, pebbling technique, derandomization, etc.\n(5)Some classical results in this area such as Immerman-Szelepscenyi  Theorem, Barrington's Theorem, circuit lower bound for parity, etc.\n(6)Recent results in this area.\n(7)Open problems and future research avenues.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-746", "course_name": " Riemann Hypothesis and Its Applications", "course_details": "\n(1)Prime counting and other arithmetic functions\n(2)Brief overview of complex analysis\n(3)Zeta function definition and basic properties\n(4)Riemann Hypothesis and its relationship with prime counting\n(5)Prime Number Theorem\n(6)Dirichlet L-functions and Generalized Riemann Hypothesis\n(7)Applications of Riemann and Generalized Riemann Hypothesis\n(8)Further extensions of Riemann Hypothesis and its proof for function fields, and elliptic curves over finite fields", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-747", "course_name": " Randomized Methods in Computational Complexity", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-748", "course_name": " Arithmetic Circuit Complexity", "course_details": "", "course_credit": "", "course_preReq": ""}, {}, {}, {"course_id": "CS-755", "course_name": " Topics in Software Engineering", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS771", "course_name": " Machine Learning Techniques", "course_details": "", "course_credit": "", "course_preReq": "Pre-requisites: MSO201A/equivalent, CS210/ESO211/ESO207A. Desirable: Familiarity\u00a0with programming in MATLAB/Octave, Python, or R"}, {"course_id": "CS-772", "course_name": " Probabilistic Machine Learning", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-773", "course_name": " Online Learning and Optimization", "course_details": "\n(1)Introduction to preliminaries in convex and real analysis, and probability theory\n(2)Online Prediction with Full Feedback\r\n\t\nOnline classification \u2013 Perceptron, Winnow\nOnline regression \u2013 gradient descent, exponentiated gradient\nLearning with expert advice \u2013 weighted majority, hedge\n(3)Online classification \u2013 Perceptron, Winnow\n(4)Online regression \u2013 gradient descent, exponentiated gradient\n(5)Learning with expert advice \u2013 weighted majority, hedge\n(6)Online Convex Optimization\r\n\t\nReview of batch optimization \u2013 batch gradient descent\nFollow the leader \u2013 regularized, perturbed\nOnline gradient descent \u2013 polynomial and logarithmic regret bounds\nOnline mirror descent \u2013 links to OGD, FTL\nStochastic gradient descent \u2013 online to batch conversion and application to batch learning\n(7)Review of batch optimization \u2013 batch gradient descent\n(8)Follow the leader \u2013 regularized, perturbed\n(9)Online gradient descent \u2013 polynomial and logarithmic regret bounds\n(10)Online mirror descent \u2013 links to OGD, FTL\n(11)Stochastic gradient descent \u2013 online to batch conversion and application to batch learning\n(12)Online Prediction with Limited Feedback\r\n\t\nStochastic/adversarial multi-armed bandits - EXP3, UCB, Thompson Sampling\nLinear and contextual bandits - lin-UCB, lin-TS\n(13)Stochastic/adversarial multi-armed bandits - EXP3, UCB, Thompson Sampling\n(14)Linear and contextual bandits - lin-UCB, lin-TS\n(15)Special Topics (depending on interest and available time)\r\n\t\nTracking shifting experts\nMini-batch methods\nBeyond additive regret\nOnline second order methods\nDerivative-free optimization\n(16)Tracking shifting experts\n(17)Mini-batch methods\n(18)Beyond additive regret\n(19)Online second order methods\n(20)Derivative-free optimization", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-774", "course_name": " Optimization Techniques", "course_details": "\n(1)Background: convex analysis, linear and matrix algebra, probability theory\n(2)Preliminaries: applications, optimality and duality conditions\n(3)First Order Methods\n\nSubgradient methods\nProximal methods\nMultiplicative weights update, mirrored descent\n(4)Subgradient methods\n(5)Proximal methods\n(6)Multiplicative weights update, mirrored descent\n(7)Second Order Methods\n\nNewton method\nQuasi-Newton methods, L-BFGS\n(8)Newton method\n(9)Quasi-Newton methods, L-BFGS\n(10)Stochastic Optimization Problems\n\nNotion of regret, online to batch conversion\nMethods offering vanishing regret - OGD, EG, OMD\n(11)Notion of regret, online to batch conversion\n(12)Methods offering vanishing regret - OGD, EG, OMD\n(13)Non-convex Optimization Problems\n\nApplications - sparse recovery, affine rank minimization, low-rank matrix completion\nConvex approaches - relaxation-based methods\nNon-convex approaches - projected gradient descent, alternating minimization\n(14)Applications - sparse recovery, affine rank minimization, low-rank matrix completion\n(15)Convex approaches - relaxation-based methods\n(16)Non-convex approaches - projected gradient descent, alternating minimization\n(17)Special topics (a subset would be chosen depending on interest and available time)\r\n\t\nAccelerated first order methods\nBayesian methods\nCoordinate methods\nCutting plane methods\nInterior point methods\nOptimization methods for deep learning\nParallel and distributed methods\nRobust optimization problems and methods\nStochastic mini-batch methods\nSubmodular optimization problems and methods\nVariance reduced stochastic methods\nZeroth order methods\n(18)Accelerated first order methods\n(19)Bayesian methods\n(20)Coordinate methods\n(21)Cutting plane methods\n(22)Interior point methods\n(23)Optimization methods for deep learning\n(24)Parallel and distributed methods\n(25)Robust optimization problems and methods\n(26)Stochastic mini-batch methods\n(27)Submodular optimization problems and methods\n(28)Variance reduced stochastic methods\n(29)Zeroth order methods", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-781", "course_name": " Cognition: Memory", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-782", "course_name": " Cognitive Semantics", "course_details": "", "course_credit": "Units: 3-0-0-4", "course_preReq": ""}, {"course_id": "CS-784", "course_name": " Language Acquisition", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-785", "course_name": " Multiagent Systems: Games, Algorithms, Evolution", "course_details": "\n(1)Biological and human communities - structure and properties.\n(2)Competition, cooperation, evolution.\n(3)What is a game? Non evolutionary and evolutionary games. Numerous  examples from biology, economics, decision theory, social choice etc.\n(4)Payoffs, strategies - pure, mixed, behavioural. Stability and equilibrium.\n(5)Information production, transmission and use in games. Rationality, common knowledge.\n(6)Competition, non-cooperation and the corresponding games.\n(7)Cooperation and related games.\n(8)Dynamic models and evolutionary games.\n(9)Fairness, trust, reputation in decision making and games.\n(10)Public goods, the commons and related problems.\n(11)Brief introduction to mechanism design.", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-789", "course_name": " Special topics in Languages acquistion and origins", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-797", "course_name": " Special Advance Topics in Computer Science", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "CS-799", "course_name": " PhD Thesis", "course_details": "", "course_credit": "", "course_preReq": ""}, {"course_id": "ESc-101", "course_name": " Fundamentals of Computing", "course_details": "", "course_credit": "", "course_preReq": ""}]